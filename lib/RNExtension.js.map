{"version":3,"sources":["../src/RNExtension.js"],"names":["RNWebGLTextureManager","RNWebGLLoopManager","middlewares","addMiddleware","middleware","push","createWithContext","gl","ctxId","reduce","ext","loadTexture","create","config","then","objId","width","height","texture","unloadTexture","destroy","id","endFrame","__endFrame"],"mappings":";;;;;;;;AACA;;AACA;;IAEQA,qB,8BAAAA,qB;IAAuBC,kB,8BAAAA,kB;;;AAoB/B,IAAMC,cAAiC,EAAvC;;kBAEe;AACbC,iBAAe,uBAACC,UAAD,EAA4B;AACzCF,gBAAYG,IAAZ,CAAiBD,UAAjB;AACD,GAHY;AAIbE,qBAAmB,2BAACC,EAAD,EAA8BC,KAA9B;AAAA,WACjBN,YAAYO,MAAZ,CAAmB,UAACC,GAAD,EAAMN,UAAN;AAAA,aAAqBA,WAAWM,GAAX,CAArB;AAAA,KAAnB,EAAyD;AACvDC,mBAAa;AAAA;AACX;AACA;AACAX,gCAAsBY,MAAtB,cACKC,MADL;AAEEL;AAFF,cAGGM,IAHH,CAGQ,gBAA8B;AAAA,gBAA3BC,KAA2B,QAA3BA,KAA2B;AAAA,gBAApBC,KAAoB,QAApBA,KAAoB;AAAA,gBAAbC,MAAa,QAAbA,MAAa;;AACpC,gBAAMC,UAAU,+BAAmBH,KAAnB,CAAhB;AACA,mBAAO,EAAEG,gBAAF,EAAWF,YAAX,EAAkBC,cAAlB,EAAP;AACD,WAND;AAHW;AAAA,OAD0C;AAWvDE,qBAAe;AAAA,eAAWnB,sBAAsBoB,OAAtB,CAA8BF,QAAQG,EAAtC,CAAX;AAAA,OAXwC;AAYvDC,gBAAU,oBAAM;AACdrB,2BAAmBqB,QAAnB,CAA4Bd,KAA5B;AACAD,WAAGgB,UAAH;AACD;AAfsD,KAAzD,CADiB;AAAA;AAJN,C","file":"RNExtension.js","sourcesContent":["//@flow\nimport { NativeModules } from 'react-native';\nimport { RNWebGLTexture } from './webglTypes';\n\nconst { RNWebGLTextureManager, RNWebGLLoopManager } = NativeModules;\n\ntype RNWebGLRenderingContext = WebGLRenderingContext & {\n  __endFrame: *,\n  __readPixelsToTemporaryFile: *\n};\n\ntype Config = Object;\n\nexport type Extension = {\n  // NB more methods can be extended with middlewares\n  loadTexture: (\n    config: Config\n  ) => Promise<{ texture: RNWebGLTexture, width: number, height: number }>,\n  unloadTexture: (texture: RNWebGLTexture) => void,\n  endFrame: () => void\n};\n\ntype Middleware = (extIn: Extension) => Extension;\n\nconst middlewares: Array<Middleware> = [];\n\nexport default {\n  addMiddleware: (middleware: Middleware) => {\n    middlewares.push(middleware);\n  },\n  createWithContext: (gl: RNWebGLRenderingContext, ctxId: number): Extension =>\n    middlewares.reduce((ext, middleware) => middleware(ext), {\n      loadTexture: config =>\n        // WARNING can only load 8 textures at a time\n        // Loading 9 textures will break the app\n        RNWebGLTextureManager.create({\n          ...config,\n          ctxId\n        }).then(({ objId, width, height }) => {\n          const texture = new RNWebGLTexture(objId);\n          return { texture, width, height };\n        }),\n      unloadTexture: texture => RNWebGLTextureManager.destroy(texture.id),\n      endFrame: () => {\n        RNWebGLLoopManager.endFrame(ctxId);\n        gl.__endFrame();\n      }\n    })\n};\n"]}